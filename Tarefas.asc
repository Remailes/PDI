= Processamento Digital de Imagens
:author: Izaias Remailes Silva de Paula
:email: izzaias@outlook.com.br

== Exercício 3.2

Este exercício tem a intenção de colocar em prática as técnicas de manipular pixels em uma imagem. O programa elaborado tem duas funcionalidades, a primeira cria uma região(de escolha do usuário) com efeito negativo, e a segunda troca aleatoriamente 4 regiões da imagem fornecida.

Para a demonstração será usada essa imagem abaixo.

image::bird.png[Passaro]

No código do programa elaborado, após a decaração das variáveis, é solicitado ao usuário 
para fornecer dois pontos na imagens, esses pontos indicaram ao programa a região da imagem que deve ficar com efeito negativo, e assim o código entra em um 'loop' para percorrer os pixels da região escolhida pelo usuário modificando seus valores aplicando o efeito de negativo, e depois a imagem com efeito é mostrada e a imagem é fechada.

E no segundo trecho do código, a imagem é novamente aberta. Mas antes de continuar é 
fundamental saber que foram declaradas quatro matrizes de dimensões 128x128 como variaveis globais, isso porque existe a função 'pintar(int m)', esta função pinta a nova imagem a seguinte sequência: quadrante 4, quadrante 1, quadrante 2 e quadrante 3, de acordo com o inteiro 'm' recebido. Por exemplo: se a imagem ainda não foi mexida, a o intiro 'm' recebido foi 2, a região do quadrante 4 da nova imagem receberá a região do quadrante 2 da imagem original. E continuando na função 'main()', após a abertura da imagem em tons de cinza, cada região da imagem é guardada em outras matrizes já mencionadas, e por fim são gerados números aleatórios que determinaram as trocas de regiões na nova imagem.

....
#include <iostream>
#include <cv.h>
#include <highgui.h>
#include <opencv2/highgui/highgui.hpp> 
#include <time.h>

using namespace cv;
using namespace std;

Mat image2;
int A0[128][128];
int A1[128][128];
int A2[128][128];
int A3[128][128];
int cont=0;

void pintar(int m){
  for(int i=0;i<255;i++){
    for(int j=0;j<255;j++){
      if(cont == 0){
        if(i<128 && j<128){
          switch(m){
            case 0:
              image2.at<uchar>(i,j) = A0[i][j];
              break;
            case 1:
              image2.at<uchar>(i,j) = A1[i][j];
              break;
            case 2:
              image2.at<uchar>(i,j) = A2[i][j];
              break;
            case 3:
              image2.at<uchar>(i,j) = A3[i][j];
              break;
          }
        }
      }
      if(cont == 1){
        if(i<128 && j>127){
          switch(m){
            case 0:
              image2.at<uchar>(i,j) = A0[i][j-128];
              break;
            case 1:
              image2.at<uchar>(i,j) = A1[i][j-128];
              break;
            case 2:
              image2.at<uchar>(i,j) = A2[i][j-128];
              break;
            case 3:
              image2.at<uchar>(i,j) = A3[i][j-128];
              break;
          }
        }
      }
      if(cont == 2){
        if(i>127 && j<128){
          switch(m){
            case 0:
              image2.at<uchar>(i,j) = A0[i-128][j];
              break;
            case 1:
              image2.at<uchar>(i,j) = A1[i-128][j];
              break;
            case 2:
              image2.at<uchar>(i,j) = A2[i-128][j];
              break;
            case 3:
              image2.at<uchar>(i,j) = A3[i-128][j];
              break;
          }
        }
      }
      if(cont == 3){
        if(i>127 && j>127){
          switch(m){
            case 0:
              image2.at<uchar>(i,j) = A0[i-128][j-128];
              break;
            case 1:
              image2.at<uchar>(i,j) = A1[i-128][j-128];
              break;
            case 2:
              image2.at<uchar>(i,j) = A2[i-128][j-128];
              break;
            case 3:
              image2.at<uchar>(i,j) = A3[i-128][j-128];
              break;
          }
        }
      }
    }
  }
}

int main(int, char**){
  
//Primeiro trecho do código
//***************************************************************

  Mat image, image3;
  int x1, x2, y1, y2, width, height;

  image= imread("bird.png",CV_LOAD_IMAGE_GRAYSCALE);
  if(!image.data)
    cout << "nao abriu bolhas.png" << endl;

  cout<<"Forneça a coordenada 'x' do primeiro ponto:";
  cin >> x1;
  cout<<"Forneça a coordenada 'y' do primeiro ponto:";
  cin >> y1;
  cout<<"Forneça a coordenada 'x' do segundo ponto:";
  cin >> x2;
  cout<<"Forneça a coordenada 'y' do primeiro ponto:";
  cin >> y2;

  width=image.size().width;
  height=image.size().height;

  for(int i=x1;i<x2;i++){
    for(int j=y1;j<y2;j++){
      int a = image.at<uchar>(i,j);
      int b = 255-a;
      image.at<uchar>(i,j)=b;
    }
  }

  imshow("image", image);
  waitKey();

//Segundo trecho do código
//***************************************************************

  int regA=10, regB=10, regC=10, regD=10;
  
  bool T= false;
  srand( (unsigned)time(NULL) );
  image2 = imread("bird.png",CV_LOAD_IMAGE_GRAYSCALE);
  if(!image2.data)
    cout << "nao abriu bolhas.png" << endl;

  for(int i=0;i<height;i++){
    for(int j=0;j<width;j++){
      if(i<128 && j<128){
        A0[i][j] = image2.at<uchar>(i,j);
      }
      if(i<128 && j>127){
        A1[i][j-128] = image2.at<uchar>(i,j);
      }
      if(i>127 && j<128){
        A2[i-128][j] = image2.at<uchar>(i,j);
      }
      if(i>127 && j>127){
        A3[i-128][j-128] = image2.at<uchar>(i,j);
      }
    }
  }

  int e;
  while(T!=true){
    e = rand() % 4;
    if(regA==10){
      regA=e;
      pintar(e);
      cont++;
    }
    if(regA!=10 && e!=regA && regB==10){
      regB=e;
      pintar(e);
      cont++;
    }
    if(regA!=10 && e!=regA && regB!=10 && e!=regB &&regC==10){
      regC=e;
      pintar(e);
      cont++;
    }
    if(regA!=10 && e!=regA && regB!=10 && e!=regB && regC!=10 && e!=regC && regD==10){
      regD=e;
      pintar(e);
      cont++;
      T = true;
    }
  }

  imwrite("regioes.png", image2);
  waitKey();

  return 0;
}
....

Na execução do programa, os pon tos fornecidos foram: P1(20,20) e P2(160,160), e podemos 
ver nas figuras abaixo o resultado do processamento.

image::negativo.png[efeito]
image::regioes.png[troca]

== Exercício 4.2